/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type G1PointStruct = {
  x: PromiseOrValue<BigNumberish>;
  y: PromiseOrValue<BigNumberish>;
};

export type G1PointStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type DleqProofStruct = {
  f: PromiseOrValue<BigNumberish>;
  e: PromiseOrValue<BigNumberish>;
};

export type DleqProofStructOutput = [BigNumber, BigNumber] & {
  f: BigNumber;
  e: BigNumber;
};

export type CiphertextStruct = {
  random: G1PointStruct;
  cipher: PromiseOrValue<BigNumberish>;
  random2: G1PointStruct;
  dleq: DleqProofStruct;
};

export type CiphertextStructOutput = [
  G1PointStructOutput,
  BigNumber,
  G1PointStructOutput,
  DleqProofStructOutput
] & {
  random: G1PointStructOutput;
  cipher: BigNumber;
  random2: G1PointStructOutput;
  dleq: DleqProofStructOutput;
};

export interface ArtizenInterface extends utils.Interface {
  functions: {
    "buyLicense(uint256,(uint256,uint256),uint8)": FunctionFragment;
    "contribute(((uint256,uint256),uint256,(uint256,uint256),(uint256,uint256)),string)": FunctionFragment;
    "contributions(uint256)": FunctionFragment;
    "contributors(uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
    "oracleResult(uint256,((uint256,uint256),uint256,(uint256,uint256),(uint256,uint256)))": FunctionFragment;
    "payments(address)": FunctionFragment;
    "withdrawPayments(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyLicense"
      | "contribute"
      | "contributions"
      | "contributors"
      | "oracle"
      | "oracleResult"
      | "payments"
      | "withdrawPayments"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyLicense",
    values: [
      PromiseOrValue<BigNumberish>,
      G1PointStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [CiphertextStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleResult",
    values: [PromiseOrValue<BigNumberish>, CiphertextStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "payments",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayments",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "buyLicense", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayments",
    data: BytesLike
  ): Result;

  events: {
    "ContentDecryption(uint256,tuple)": EventFragment;
    "LicenseBought(address,uint256,uint8,uint256,uint256)": EventFragment;
    "NewContribution(address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContentDecryption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewContribution"): EventFragment;
}

export interface ContentDecryptionEventObject {
  requestId: BigNumber;
  cipher: CiphertextStructOutput;
}
export type ContentDecryptionEvent = TypedEvent<
  [BigNumber, CiphertextStructOutput],
  ContentDecryptionEventObject
>;

export type ContentDecryptionEventFilter =
  TypedEventFilter<ContentDecryptionEvent>;

export interface LicenseBoughtEventObject {
  licensee: string;
  contentId: BigNumber;
  licenseType: number;
  price: BigNumber;
  requestId: BigNumber;
}
export type LicenseBoughtEvent = TypedEvent<
  [string, BigNumber, number, BigNumber, BigNumber],
  LicenseBoughtEventObject
>;

export type LicenseBoughtEventFilter = TypedEventFilter<LicenseBoughtEvent>;

export interface NewContributionEventObject {
  contributor: string;
  contentId: BigNumber;
  uri: string;
}
export type NewContributionEvent = TypedEvent<
  [string, BigNumber, string],
  NewContributionEventObject
>;

export type NewContributionEventFilter = TypedEventFilter<NewContributionEvent>;

export interface Artizen extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArtizenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyLicense(
      cipherId: PromiseOrValue<BigNumberish>,
      buyerPublicKey: G1PointStruct,
      licenseType: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contribute(
      cipher: CiphertextStruct,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { contributor: string; uri: string }>;

    contributors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    oracleResult(
      requestId: PromiseOrValue<BigNumberish>,
      cipher: CiphertextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payments(
      dest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyLicense(
    cipherId: PromiseOrValue<BigNumberish>,
    buyerPublicKey: G1PointStruct,
    licenseType: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contribute(
    cipher: CiphertextStruct,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { contributor: string; uri: string }>;

  contributors(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  oracleResult(
    requestId: PromiseOrValue<BigNumberish>,
    cipher: CiphertextStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payments(
    dest: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawPayments(
    payee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyLicense(
      cipherId: PromiseOrValue<BigNumberish>,
      buyerPublicKey: G1PointStruct,
      licenseType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contribute(
      cipher: CiphertextStruct,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { contributor: string; uri: string }>;

    contributors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    oracleResult(
      requestId: PromiseOrValue<BigNumberish>,
      cipher: CiphertextStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    payments(
      dest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContentDecryption(uint256,tuple)"(
      requestId?: PromiseOrValue<BigNumberish> | null,
      cipher?: CiphertextStruct | null
    ): ContentDecryptionEventFilter;
    ContentDecryption(
      requestId?: PromiseOrValue<BigNumberish> | null,
      cipher?: CiphertextStruct | null
    ): ContentDecryptionEventFilter;

    "LicenseBought(address,uint256,uint8,uint256,uint256)"(
      licensee?: PromiseOrValue<string> | null,
      contentId?: PromiseOrValue<BigNumberish> | null,
      licenseType?: null,
      price?: null,
      requestId?: null
    ): LicenseBoughtEventFilter;
    LicenseBought(
      licensee?: PromiseOrValue<string> | null,
      contentId?: PromiseOrValue<BigNumberish> | null,
      licenseType?: null,
      price?: null,
      requestId?: null
    ): LicenseBoughtEventFilter;

    "NewContribution(address,uint256,string)"(
      contributor?: PromiseOrValue<string> | null,
      contentId?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): NewContributionEventFilter;
    NewContribution(
      contributor?: PromiseOrValue<string> | null,
      contentId?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): NewContributionEventFilter;
  };

  estimateGas: {
    buyLicense(
      cipherId: PromiseOrValue<BigNumberish>,
      buyerPublicKey: G1PointStruct,
      licenseType: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contribute(
      cipher: CiphertextStruct,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contributors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    oracleResult(
      requestId: PromiseOrValue<BigNumberish>,
      cipher: CiphertextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payments(
      dest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyLicense(
      cipherId: PromiseOrValue<BigNumberish>,
      buyerPublicKey: G1PointStruct,
      licenseType: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contribute(
      cipher: CiphertextStruct,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleResult(
      requestId: PromiseOrValue<BigNumberish>,
      cipher: CiphertextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payments(
      dest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
